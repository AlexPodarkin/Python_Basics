a = range(0, 10, 2)
print(f'{a=}, {type(a)=}, {a.__sizeof__()=}, {len(a)}')
b = range(-1_000_000, 1_000_000, 2)
print(f'{b=}, {type(b)=}, {b.__sizeof__()=}, {len(b)}')
# Генератор на 5-ть пять значений и генератор b на test млн. значений занимают
# одинаковое место в памяти.

# Генераторные выражения
# Генераторные выражения Python позволяют создать собственный генератор,
# перебирающий значения.
easy = list((i for i in range(11)))
print(easy)
print("простейший пример, вывода четных чисел ( фильтр(lambda, генератор) )")
easy = list(filter(lambda j: j % 2 == 0, (i for i in range(11))))
print(easy)

my_gen = (chr(i) for i in range(97, 123))
print(my_gen)
# <generator object <genexpr> at 0x000001ED58DD7D60>
for char in my_gen:
    print(char, end="|")

print("Создаём генератор на основе двух списков x и y. 7 элементов в первом списке и 6 во\
втором. Всего 13. Генератор считает сумму пар элементов.\
Генератор перебирает все значения списка x и оставляет только нечётные.\
Исключаем 2 и 8, т.е. оставляем 5 из 7 элементов списка для вычисления суммы. В\
списке y исключаем единицу, т.е. оставляем 5 из 6 элементов. Новичок может\
подумать, что на выходе получим 10 элементов - 5 из x и 5 из y. Но циклы вложены\
друг в друга, следовательно количество элементов на выходе 5х5=25")
x = [1, 1, 2, 3, 5, 8, 13]
y = [1, 2, 6, 24, 120, 720]
print(f'{len(x)=}\t{len(y)=}')
mult = (i + j for i in x
        if i % 2 != 0
        for j in y
        if j != 1)
res = list(mult)
print(f'{len(res)=}\n{res}')
